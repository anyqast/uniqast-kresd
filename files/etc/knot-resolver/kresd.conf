if env.LOCAL_ADDRESS then
	local split = require 'split'.split
	for key, ip in pairs(split(env.LOCAL_ADDRESS, ',')) do
		net.listen(ip)
	end
else
	net.listen('0.0.0.0')
end
if env.HEALTHCHECK_LISTEN_IP then
	net.listen(env.HEALTHCHECK_LISTEN_IP)
end

modules = {
	'stats',
	'nsid',
	'prefill',
	'serve_stale < cache'
}

cache.storage = 'lmdb://' .. (env.CACHEPATH or '.')
cache.size = (tonumber(env.CACHESIZE) or 8) * MB

prefill.config({
	['.'] = {
		url = 'https://www.internic.net/domain/root.zone',
		ca_file = '/etc/ssl/certs/ca-certificates.crt',
		interval = 86400
	}
})

reorder_RR(true)

opennic_trees = policy.todnames({
	'bbs',
	'chan',
	'cyb',
	'dyn',
	'epic',
	'geek',
	'glue',
	'gopher',
	'indy',
	'libre',
	'neo',
	'null',
	'o',
	'oss',
	'oz',
	'parody',
	'pirate',
	'bazar',
	'coin',
	'emc',
	'lib',
	'fur',
	'ku',
	'te',
	'ti',
	'uu'
})

policy.add(function (state, query)
	if query.stype == kres.type.ANY then
		print('dropping packet')
		return policy.DROP
	end
end)

policy.add(policy.suffix(policy.FLAGS({'NO_CACHE'}), opennic_trees))
policy.add(policy.suffix(policy.STUB({'127.0.0.1@2053'}), opennic_trees))

local name = hostname()
local worker_id = tonumber(env.WORKER) or 0
local fullname = name .. '-' .. worker_id
local version = package_version()
nsid.name(fullname)

local influx = {
	proto       = env.INFLUXDB_PROTO          or 'http',
	host        = env.INFLUXDB_HOST           or nil,
	user        = env.INFLUXDB_USER           or nil,
	pass        = env.INFLUXDB_PASS           or nil,
	database    = env.INFLUXDB_DATABASE       or nil,
	port        = tonumber(env.INFLUXDB_PORT) or 8086,
	measurement = env.INFLUXDB_MEASUREMENT    or 'kresd'
}

if influx.host and influx.port and influx.measurement then
	local socket = require('socket')
	local csocket = require('cqueues.socket')
	local prev_stats = {}
	local prev_cache_stats = {}
	local prev_ts = socket.gettime()
	function write_stats_to_influxdb()
		local tags_kv = {
			hostname = name,
			worker = worker_id,
			name = fullname,
			version = version
		}
		local tags = {}
		for k, v in pairs(tags_kv) do
			table.insert(tags, k .. '=' .. v)
		end
		local stats_fields = {}
		local cache_stats_fields = {}
		local stats = stats.list()
		local cache_stats = cache.stats()
		local ts = socket.gettime()
		for k, v in pairs(cache_stats) do
			local prev_value = prev_cache_stats[k] or 0
			table.insert(cache_stats_fields, k:gsub('%.', '_') .. '=' .. (v - prev_value) .. 'i')
		end
		table.insert(cache_stats_fields, 'current_size=' .. cache.current_size .. 'i')
		table.insert(cache_stats_fields, 'entries=' .. cache.count() .. 'i')
		for k, v in pairs(stats) do
			local prev_value = prev_stats[k] or 0
			table.insert(stats_fields, k:gsub('%.', '_') .. '=' .. (v - prev_value) .. 'i')
		end
		stats_fields.metrictimedelta = ts - prev_ts
		cache_stats_fields.metrictimedelta = ts - prev_ts
		local s = csocket.connect({
			host = influx.host,
			port = influx.port,
			type = csocket.SOCK_DGRAM
		})
		pcall(s.setmode, s, 'bn', 'bn')
		local stats_line = influx.measurement .. ',' .. table.concat(tags, ',') .. ' ' .. table.concat(stats_fields, ',') .. ' ' .. string.format('%.f', ts * 1000000000)
		local cache_stats_line = influx.measurement .. '_cache,' .. table.concat(tags, ',') .. ' ' .. table.concat(cache_stats_fields, ',') .. ' ' .. string.format('%.f', ts * 1000000000)
		pcall(s.write, s, stats_line .. '\n')
		pcall(s.write, s, cache_stats_line .. '\n')
		pcall(s.close, s)
	end
	print('Sending InfluxDB metrics to udp://' .. influx.host .. ':' .. influx.port)
	event.recurrent(1 * sec, function () worker.coroutine(write_stats_to_influxdb) end)
end
