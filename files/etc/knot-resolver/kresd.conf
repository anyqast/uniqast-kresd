
net.listen('0.0.0.0')

modules = {
	'stats',
	'http',
	'nsid',
	'prefill',
	'serve_stale'
}

cache.size = 8 * MB

prefill.config({
	['.'] = {
		url = 'https://www.internic.net/domain/root.zone',
		ca_file = '/etc/ssl/certs/ca-certificates.crt',
		interval = 86400
	}
})

reorder_RR(true)

opennic_trees = policy.todnames({
	'bbs',
	'chan',
	'cyb',
	'dyn',
	'epic',
	'geek',
	'glue',
	'gopher',
	'indy',
	'libre',
	'neo',
	'null',
	'o',
	'oss',
	'oz',
	'parody',
	'pirate',
	'bazar',
	'coin',
	'emc',
	'lib',
	'fur',
	'ku',
	'te',
	'ti',
	'uu'
})

policy.add(function (req, query)
	if query.stype == kres.type.ANY then
		return policy.DROP
	end
end)

policy.add(policy.suffix(policy.FLAGS({'NO_CACHE'}), opennic_trees))
policy.add(policy.suffix(policy.STUB({'127.0.0.1@2053'}), opennic_trees))

nsid.name(hostname())


if env.INFLUXDB_PROTO and env.INFLUXDB_HOST and env.INFLUXDB_USER and env.INFLUXDB_PASS and env.INFLUXDB_DATABASE and env.INFLUXDB_PORT then
	require "socket"
	local http = require("socket.http")
	function write_stats_to_influxdb()
		-- print(table.show(stats.list()))
		line = {}
		for k, v in pairs(stats.list())
		do
			table.insert(line, k:gsub("%.", "_") .. "=" .. v .. "i")
		end
		line = "kresd,hostname=" .. hostname() .. ",version=" .. package_version() .. " " .. table.concat(line, ",") .. " " .. string.format("%.f", socket.gettime() * 1000000000)
		http.request(env.INFLUXDB_PROTO .. "://" .. env.INFLUXDB_USER .. ":" .. env.INFLUXDB_PASS .. "@" .. env.INFLUXDB_HOST .. ":" .. env.INFLUXDB_PORT .. "/write?db=" .. env.INFLUXDB_DATABASE, line)
	end
	print("Sending InfluxDB metrics to " .. env.INFLUXDB_PROTO .. "://" .. env.INFLUXDB_USER .. ":[REDACTED]@" .. env.INFLUXDB_HOST .. ":" .. env.INFLUXDB_PORT .. "/write?db=" .. env.INFLUXDB_DATABASE)
	worker.coroutine(function ()
		event.recurrent(1 * sec, function (e)
			write_stats_to_influxdb()
		end)
	end)
end
